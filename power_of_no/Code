#include<bits/stdc++.h>
#include<chrono>
#include <cstdlib>
using namespace std;
using namespace std::chrono;

int power(int m,int n)
{
    if(n==0)
    {
        return 1;
    }
    else
    {
        return(m*power(m,n-1));
    }
}

int main()
{
    int *arr = new int(10000000);
    for(int i=100000;i<=1000000;i+=100000)
    {
    auto start = high_resolution_clock::now();
    for(int m =1;m<=10;m++)
    {
        int p = power(2,i);
    }
    auto stop = high_resolution_clock::now();
    auto duration = (duration_cast<nanoseconds>(stop-start))/10;
    cout << "inputs \t" << i    << "\t Time taken: " << duration.count() << "nanoseconds" << endl ;
    }

    return 0;
}


// Iterative approach


#include<bits/stdc++.h>
#include<chrono>
#include <cstdlib>
using namespace std;
using namespace std::chrono;

int power(int m, int n) {
    int result = 1;
    for (int i = 0; i < n; ++i) {
        result *= m;
    }
    return result;
}

int main() {
    int *arr = new int(10000000);
    
    for(int i = 100000; i <= 1000000; i += 100000) {
        auto start = high_resolution_clock::now();
        for(int m = 1; m <= 10; m++) {
            int p = power(2, i);
        }
        auto stop = high_resolution_clock::now();
        auto duration = (duration_cast<nanoseconds>(stop - start)) / 10;
        cout << "(" << i << "," << "\t" << duration.count() << ")," << endl;
    }

    delete arr; 
    return 0;
}
