#include<iostream>
#include<chrono>
#include<cstdlib>
using namespace std;
using namespace std::chrono;

int *generate_number(int arr[], int g){
    for (int j = 1; j<= g ; j++){
        arr[j] = rand();
    }
    return arr;
}

void selection_sort(int arr[],int n)
{
    for(int i=0;i<n;i++)
    {
        int j=i;
        for(int k=i+1;k<=n;k++)
        {
            if(arr[k]<arr[j])
            {
                j = k;
            }
        }
        int temp=arr[i];  // swapping
        arr[i]=arr[j];
        arr[j] = temp;
    }
}

int main()
{

    int *arr = new int(5000);         // Dynamic array
    for(int i=1000; i<=5000; i=i+200)
    {
    arr = generate_number(arr,i);

    auto start = high_resolution_clock::now();  // Time count

    for(int m =1;m<=10;m++)
    {
        selection_sort(arr,i);
    }

    auto stop = high_resolution_clock::now();

   auto duration = (duration_cast<nanoseconds>(stop-start))/10;
   // cout << "inputs \t" << i    << "\t Time taken to complete sorting: " << duration.count()<<" nanoseconds.."<< endl ;
  //  cout<<duration.count()<<endl;
    cout << i << "\t" << duration.count() << endl;
    }
return 0;
};

// for plotting

import matplotlib.pyplot as plt
filename = next(iter(uploaded))
with open('output.txt', 'r') as f:
    lines = f.readlines()

inputs = [int(line.split()[0]) for line in lines]
times = [int(line.split()[1]) for line in lines]

# Plot the graph
plt.plot(inputs, times, marker='o')
plt.title('Execution Time vs Input Size')
plt.xlabel('Input Size')
plt.ylabel('Execution Time (nanoseconds)')
plt.grid(True)
plt.show()
